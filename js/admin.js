const API_URL = 'http://localhost:3000/products';
let currentEditId = null;

// Hi·ªÉn th·ªã form th√™m s·∫£n ph·∫©m
function showAddProductForm() {
  currentEditId = null;
  document.getElementById('formTitle').innerText = 'Th√™m S·∫£n Ph·∫©m M·ªõi';
  document.getElementById('formProduct').reset();
  document.getElementById('productForm').style.display = 'block';
}

// ·∫®n form
function cancelProductForm() {
  document.getElementById('productForm').style.display = 'none';
  currentEditId = null;
}

// Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
document.addEventListener('DOMContentLoaded', async () => {
  await loadProducts();
});

// Load s·∫£n ph·∫©m t·ª´ JSON Server
async function loadProducts() {
  const tbody = document.getElementById('productsTableBody');
  try {
    const res = await fetch(API_URL);
    const products = await res.json();
    renderProducts(products, tbody);
  } catch (err) {
    console.error('L·ªói t·∫£i s·∫£n ph·∫©m:', err);
    tbody.innerHTML = `<tr><td colspan="7">Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ server.</td></tr>`;
  }
}

// Render s·∫£n ph·∫©m
function renderProducts(products, tbody) {
  tbody.innerHTML = '';
  if (!products.length) {
    tbody.innerHTML = '<tr><td colspan="7" style="text-align:center;">Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o</td></tr>';
    return;
  }

  products.forEach(p => {
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${p.id}</td>
      <td><img src="${p.image || ''}" width="60" height="60" style="object-fit:cover;border-radius:5px;" onerror="this.src='https://via.placeholder.com/60?text=No+Img'"></td>
      <td>${p.name}</td>
      <td>${formatCurrency(p.price)}</td>
      <td>${p.category}</td>
      <td>${p.stock}</td>
      <td>
        <button onclick="editProduct(${p.id})">S·ª≠a</button>
        <button onclick="deleteProduct(${p.id})">X√≥a</button>
      </td>
    `;
    tbody.appendChild(tr);
  });
}

// L·∫•y d·ªØ li·ªáu form
function getFormData() {
  return {
    name: document.getElementById('productName').value.trim(),
    price: Number(document.getElementById('productPrice').value),
    category: document.getElementById('productCategory').value,
    description: document.getElementById('productDescription').value.trim(),
    image: document.getElementById('productImage').value.trim(),
    stock: Number(document.getElementById('productStock').value),
  };
}

// L∆∞u s·∫£n ph·∫©m
async function saveProduct() {
  const product = getFormData();
  if (!product.name || !product.price) return alert('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n v√† gi√°.');

  try {
    if (currentEditId) {
      // üõ†Ô∏è C·∫≠p nh·∫≠t s·∫£n ph·∫©m c≈©
      await fetch(`${API_URL}/${currentEditId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(product)
      });
      alert('ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m.');
    } else {

// L·∫•y danh s√°ch s·∫£n ph·∫©m hi·ªán t·∫°i ƒë·ªÉ t√≠nh ID k·∫ø ti·∫øp
      const res = await fetch(API_URL);
      const products = await res.json();

      // T√≠nh ID m·ªõi = maxID + 1
      const maxId = products.length ? Math.max(...products.map(p => p.id || 0)) : 0;
      const newProduct = { id: maxId + 1, ...product };

      await fetch(API_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newProduct)
      });

      alert('ƒê√£ th√™m s·∫£n ph·∫©m m·ªõi.');
    }

    cancelProductForm();
    await loadProducts();
  } catch (err) {
    console.error('L·ªói khi l∆∞u:', err);
  }
}

// S·ª≠a s·∫£n ph·∫©m
async function editProduct(id) {
  const res = await fetch(`${API_URL}/${id}`);
  const product = await res.json();
  currentEditId = id;
  document.getElementById('formTitle').innerText = 'Ch·ªânh S·ª≠a S·∫£n Ph·∫©m';
  document.getElementById('productForm').style.display = 'block';

  document.getElementById('productId').value = product.id;
  document.getElementById('productName').value = product.name;
  document.getElementById('productPrice').value = product.price;
  document.getElementById('productCategory').value = product.category;
  document.getElementById('productDescription').value = product.description || '';
  document.getElementById('productImage').value = product.image || '';
  document.getElementById('productStock').value = product.stock || '';
}

// X√≥a s·∫£n ph·∫©m
async function deleteProduct(id) {
  if (!confirm(' B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh√¥ng?')) return;
  await fetch(`${API_URL}/${id}`, { method: 'DELETE' });
  alert(' ƒê√£ x√≥a s·∫£n ph·∫©m.');
  await loadProducts();
}

// Format ti·ªÅn
function formatCurrency(amount) {
  return Number(amount).toLocaleString('vi-VN', {
    style: 'currency',
    currency: 'VND',
  });
}

// ==================== QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG ====================
const USER_API = 'http://localhost:3000/users';
let currentUserId = null;

// Khi t·∫£i trang xong ‚Üí load danh s√°ch ng∆∞·ªùi d√πng
document.addEventListener('DOMContentLoaded', async () => {
  await loadUsers();
});

// H√†m t·∫£i danh s√°ch ng∆∞·ªùi d√πng
async function loadUsers() {
  try {
    const res = await fetch(USER_API);
    const users = await res.json();
    renderUsers(users);
  } catch (err) {
    console.error('L·ªói t·∫£i danh s√°ch ng∆∞·ªùi d√πng:', err);
  }
}

// Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng ra b·∫£ng HTML
function renderUsers(users) {
  const tbody = document.getElementById('usersTableBody');
  tbody.innerHTML = '';

  if (!users.length) {
    tbody.innerHTML = '<tr><td colspan="6" style="text-align:center;">Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o.</td></tr>';
    return;
  }

  users.forEach(u => {
    tbody.innerHTML += `
      <tr>
        <td>${u.id}</td>
        <td>${u.fullname}</td>
        <td>${u.role}</td>
        <td>${u.email}</td>
        <td>
          <button onclick="editUser(${u.id})">‚úèÔ∏è S·ª≠a</button>
          <button onclick="deleteUser(${u.id})">üóëÔ∏è X√≥a</button>
        </td>
      </tr>
    `;
  });
}

// C·∫≠p nh·∫≠t: Cho ph√©p s·ª≠a email (t√†i kho·∫£n), m·∫≠t kh·∫©u, vai tr√≤
async function editUser(id) {
  try {
    const res = await fetch(`${USER_API}/${id}`);
    const user = await res.json();

    // Hi·ªÉn th·ªã prompt cho t·ª´ng tr∆∞·ªùng
    const newEmail = prompt(` Nh·∫≠p email m·ªõi cho ng∆∞·ªùi d√πng (hi·ªán t·∫°i: ${user.email}):`, user.email);
    if (!newEmail) return;

    const newPassword = prompt(` Nh·∫≠p m·∫≠t kh·∫©u m·ªõi cho ng∆∞·ªùi d√πng (hi·ªán t·∫°i: ${user.password}):`, user.password);
    if (!newPassword) return;

    const newRole = prompt(` Nh·∫≠p vai tr√≤ m·ªõi (admin/user):`, user.role);
    if (!newRole) return;

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu ng∆∞·ªùi d√πng
    await fetch(`${USER_API}/${id}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: newEmail,
        password: newPassword,
        role: newRole
      })
    });

    alert('ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng.');
    await loadUsers();

  } catch (err) {
    console.error('L·ªói khi s·ª≠a ng∆∞·ªùi d√πng:', err);
  }
}

// X√≥a ng∆∞·ªùi d√πng
async function deleteUser(id) {
  if (!confirm(' B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y kh√¥ng?')) return;
  await fetch(`${USER_API}/${id}`, { method: 'DELETE' });
  alert(' ƒê√£ x√≥a ng∆∞·ªùi d√πng.');
  await loadUsers();
}

// Chuy·ªÉn ƒë·ªïi gi·ªØa 2 ph·∫ßn qu·∫£n l√Ω: s·∫£n ph·∫©m ‚Üî ng∆∞·ªùi d√πng
function showSection(section) {
  const product = document.getElementById('productSection');
  const user = document.getElementById('userSection');
  const btnProduct = document.getElementById('btnProduct');
  const btnUser = document.getElementById('btnUser');

  if (section === 'product') {
    product.style.display = 'block';
    user.style.display = 'none';
    btnProduct.classList.add('active');
    btnUser.classList.remove('active');
  } else {
    product.style.display = 'none';
    user.style.display = 'block';
    btnProduct.classList.remove('active');
    btnUser.classList.add('active');
  }
}
function logout() {
  if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t kh√¥ng?")) {
    // X√≥a T·∫§T C·∫¢ th√¥ng tin ƒëƒÉng nh·∫≠p
    localStorage.removeItem("currentUser");
    localStorage.removeItem("user");
    localStorage.removeItem("token");
    
    alert(" ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!");
    
    // Chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p (ƒë∆∞·ªùng d·∫´n ƒê√öNG)
    window.location.href = "login.html";
  }
}


// Initialize
document.addEventListener('DOMContentLoaded', () => {
    updateCartBadge();
    checkAuth();
})

