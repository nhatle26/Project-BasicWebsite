// auth.js - X·ª≠ l√Ω ƒëƒÉng nh·∫≠p, ƒëƒÉng k√Ω v√† session management

// ===== UTILITY FUNCTIONS =====

// Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho input
function showError(inputId, message) {
    const input = document.getElementById(inputId);
    const errorSpan = document.getElementById(inputId + 'Error');
    
    if (input && errorSpan) {
        input.classList.add('error');
        errorSpan.textContent = message;
        errorSpan.classList.add('show');
    }
}

// X√≥a th√¥ng b√°o l·ªói
function clearError(inputId) {
    const input = document.getElementById(inputId);
    const errorSpan = document.getElementById(inputId + 'Error');
    
    if (input && errorSpan) {
        input.classList.remove('error');
        errorSpan.textContent = '';
        errorSpan.classList.remove('show');
    }
}

// X√≥a t·∫•t c·∫£ l·ªói trong form
function clearAllErrors(formId) {
    const form = document.getElementById(formId);
    if (form) {
        const inputs = form.querySelectorAll('input');
        inputs.forEach(input => {
            clearError(input.id);
        });
    }
}

// Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
function showSuccess(message) {
    const successDiv = document.getElementById('successMessage');
    if (successDiv) {
        successDiv.textContent = message;
        successDiv.classList.add('show');
        
        setTimeout(() => {
            successDiv.classList.remove('show');
        }, 3000);
    }
}

// Hi·ªÉn th·ªã th√¥ng b√°o alert
function showAlert(message) {
    const alertDiv = document.getElementById('alertMessage');
    if (alertDiv) {
        alertDiv.textContent = message;
        alertDiv.classList.add('show');
        
        setTimeout(() => {
            alertDiv.classList.remove('show');
        }, 5000);
    }
}

// Validate email
function validateEmail(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
}

// Validate password (t·ªëi thi·ªÉu 6 k√Ω t·ª±)
function validatePassword(password) {
    return password.length >= 6;
}

// ===== SESSION MANAGEMENT =====

// L∆∞u th√¥ng tin user ƒëang ƒëƒÉng nh·∫≠p
function saveCurrentUser(user) {
    // Kh√¥ng l∆∞u password v√†o localStorage
    const userSession = {
        id: user.id,
        email: user.email,
        name: user.name
    };
    localStorage.setItem('currentUser', JSON.stringify(userSession));
}

// L·∫•y th√¥ng tin user hi·ªán t·∫°i
function getCurrentUser() {
    const userJson = localStorage.getItem('currentUser');
    return userJson ? JSON.parse(userJson) : null;
}

// ƒêƒÉng xu·∫•t
function logout() {
    localStorage.removeItem('currentUser');
    window.location.href = 'index.html';
}

// Ki·ªÉm tra ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
function isLoggedIn() {
    return getCurrentUser() !== null;
}

// Y√™u c·∫ßu ƒëƒÉng nh·∫≠p (redirect n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p)
function requireLogin() {
    if (!isLoggedIn()) {
        window.location.href = 'login.html';
        return false;
    }
    return true;
}

// ===== LOGIN HANDLER =====

async function handleLogin(event) {
    event.preventDefault();
    
    const email = document.getElementById('loginEmail').value.trim();
    const password = document.getElementById('loginPassword').value;
    const loginBtn = document.getElementById('loginBtn');
    
    // Clear previous errors
    clearAllErrors('loginForm');
    
    // Validate
    let hasError = false;
    
    if (!email) {
        showError('loginEmail', 'Vui l√≤ng nh·∫≠p email');
        hasError = true;
    } else if (!validateEmail(email)) {
        showError('loginEmail', 'Email kh√¥ng h·ª£p l·ªá');
        hasError = true;
    }
    
    if (!password) {
        showError('loginPassword', 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u');
        hasError = true;
    }
    
    if (hasError) return;
    
    // Disable button v√† hi·ªÉn th·ªã loading
    loginBtn.disabled = true;
    loginBtn.innerHTML = '<span class="loading"></span> ƒêang ƒëƒÉng nh·∫≠p...';
    
    try {
        // G·ªçi API ƒëƒÉng nh·∫≠p
        const user = await UsersAPI.login(email, password);
        
        // L∆∞u session
        saveCurrentUser(user);
        
        // Th√¥ng b√°o th√†nh c√¥ng
        showSuccess('ƒêƒÉng nh·∫≠p th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...');
        
        // Chuy·ªÉn v·ªÅ trang ch·ªß sau 1 gi√¢y
        setTimeout(() => {
            window.location.href = 'index.html';
        }, 1000);
        
    } catch (error) {
        console.error('Login error:', error);
        showAlert(error.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!');
        loginBtn.disabled = false;
        loginBtn.textContent = 'ƒêƒÉng nh·∫≠p';
    }
}

// ===== REGISTER HANDLER =====

async function handleRegister(event) {
    event.preventDefault();
    
    const name = document.getElementById('registerName').value.trim();
    const email = document.getElementById('registerEmail').value.trim();
    const password = document.getElementById('registerPassword').value;
    const confirmPassword = document.getElementById('registerConfirmPassword').value;
    const registerBtn = document.getElementById('registerBtn');
    
    // Clear previous errors
    clearAllErrors('registerForm');
    
    // Validate
    let hasError = false;
    
    if (!name) {
        showError('registerName', 'Vui l√≤ng nh·∫≠p h·ªç t√™n');
        hasError = true;
    }
    
    if (!email) {
        showError('registerEmail', 'Vui l√≤ng nh·∫≠p email');
        hasError = true;
    } else if (!validateEmail(email)) {
        showError('registerEmail', 'Email kh√¥ng h·ª£p l·ªá');
        hasError = true;
    }
    
    if (!password) {
        showError('registerPassword', 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u');
        hasError = true;
    } else if (!validatePassword(password)) {
        showError('registerPassword', 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
        hasError = true;
    }
    
    if (!confirmPassword) {
        showError('registerConfirmPassword', 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u');
        hasError = true;
    } else if (password !== confirmPassword) {
        showError('registerConfirmPassword', 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp');
        hasError = true;
    }
    
    if (hasError) return;
    
    // Disable button v√† hi·ªÉn th·ªã loading
    registerBtn.disabled = true;
    registerBtn.innerHTML = '<span class="loading"></span> ƒêang ƒëƒÉng k√Ω...';
    
    try {
        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const emailExists = await UsersAPI.checkEmailExists(email);
        if (emailExists) {
            showError('registerEmail', 'Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω');
            registerBtn.disabled = false;
            registerBtn.textContent = 'ƒêƒÉng k√Ω';
            return;
        }
        
        // T·∫°o user m·ªõi
        const newUser = {
            name: name,
            email: email,
            password: password, // ‚ö†Ô∏è Trong th·ª±c t·∫ø c·∫ßn hash password
            createdAt: new Date().toISOString()
        };
        
        // G·ªçi API ƒëƒÉng k√Ω
        await UsersAPI.register(newUser);
        
        // Th√¥ng b√°o th√†nh c√¥ng
        showSuccess('ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.');
        
        // Chuy·ªÉn sang tab ƒëƒÉng nh·∫≠p sau 2 gi√¢y
        setTimeout(() => {
            switchTab('login');
            // Pre-fill email
            document.getElementById('loginEmail').value = email;
        }, 2000);
        
    } catch (error) {
        console.error('Register error:', error);
        showAlert('ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!');
    } finally {
        registerBtn.disabled = false;
        registerBtn.textContent = 'ƒêƒÉng k√Ω';
    }
}

// ===== TAB SWITCHING =====

function switchTab(tabName) {
    // Update tab buttons
    const tabs = document.querySelectorAll('.tab');
    tabs.forEach(tab => {
        if (tab.dataset.tab === tabName) {
            tab.classList.add('active');
        } else {
            tab.classList.remove('active');
        }
    });
    
    // Update forms
    const loginForm = document.getElementById('loginForm');
    const registerForm = document.getElementById('registerForm');
    
    if (tabName === 'login') {
        loginForm.classList.remove('hidden');
        registerForm.classList.add('hidden');
        clearAllErrors('registerForm');
    } else {
        loginForm.classList.add('hidden');
        registerForm.classList.remove('hidden');
        clearAllErrors('loginForm');
    }
}

// ===== TOGGLE PASSWORD VISIBILITY =====

function setupPasswordToggle() {
    const toggleButtons = document.querySelectorAll('.toggle-password');
    
    toggleButtons.forEach(button => {
        button.addEventListener('click', function() {
            const targetId = this.dataset.target;
            const input = document.getElementById(targetId);
            
            if (input.type === 'password') {
                input.type = 'text';
                this.textContent = 'üôà';
            } else {
                input.type = 'password';
                this.textContent = 'üëÅÔ∏è';
            }
        });
    });
}

// ===== INITIALIZATION =====

document.addEventListener('DOMContentLoaded', function() {
    // Check if already logged in
    if (isLoggedIn()) {
        console.log('User already logged in:', getCurrentUser());
    }
    
    // Setup event listeners
    const loginForm = document.getElementById('loginForm');
    const registerForm = document.getElementById('registerForm');
    
    if (loginForm) {
        loginForm.addEventListener('submit', handleLogin);
    }
    
    if (registerForm) {
        registerForm.addEventListener('submit', handleRegister);
    }
    
    // Tab switching
    const tabs = document.querySelectorAll('.tab');
    tabs.forEach(tab => {
        tab.addEventListener('click', function() {
            switchTab(this.dataset.tab);
        });
    });
    
    // Password toggle
    setupPasswordToggle();
});

// Export functions ƒë·ªÉ s·ª≠ d·ª•ng ·ªü c√°c trang kh√°c
window.auth = {
    getCurrentUser,
    isLoggedIn,
    requireLogin,
    logout,
    saveCurrentUser
};