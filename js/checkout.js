// js/checkout.js - X·ª≠ l√Ω thanh to√°n (POST order ƒë·∫øn API)

// ===== L∆ØU ƒê·ªåN H√ÄNG V√ÄO LOCALSTORAGE =====
// Trong th·ª±c t·∫ø, b·∫°n s·∫Ω POST ƒë·∫øn API: fetch('http://localhost:3000/orders', {...})
function saveOrder(orderData) {
    let orders = JSON.parse(localStorage.getItem('orders') || '[]');
    
    // T·∫°o order v·ªõi ID v√† timestamp
    const newOrder = {
        id: Date.now(),
        ...orderData,
        createdAt: new Date().toISOString(),
        status: 'pending' // pending, processing, completed, cancelled
    };
    
    orders.push(newOrder);
    localStorage.setItem('orders', JSON.stringify(orders));
    
    return newOrder;
}

// ===== L·∫§Y T·∫§T C·∫¢ ƒê∆†N H√ÄNG =====
function getAllOrders() {
    return JSON.parse(localStorage.getItem('orders') || '[]');
}

// ===== L·∫§Y ƒê∆†N H√ÄNG C·ª¶A USER HI·ªÜN T·∫†I =====
function getUserOrders(userEmail) {
    const allOrders = getAllOrders();
    return allOrders.filter(order => order.email === userEmail);
}

// ===== L·∫§Y ƒê∆†N H√ÄNG THEO ID =====
function getOrderById(orderId) {
    const orders = getAllOrders();
    return orders.find(order => order.id === parseInt(orderId));
}

// ===== C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI ƒê∆†N H√ÄNG =====
function updateOrderStatus(orderId, newStatus) {
    const orders = getAllOrders();
    const order = orders.find(o => o.id === parseInt(orderId));
    
    if (order) {
        order.status = newStatus;
        order.updatedAt = new Date().toISOString();
        localStorage.setItem('orders', JSON.stringify(orders));
        return true;
    }
    return false;
}

// ===== X√ìA ƒê∆†N H√ÄNG =====
function deleteOrder(orderId) {
    let orders = getAllOrders();
    orders = orders.filter(o => o.id !== parseInt(orderId));
    localStorage.setItem('orders', JSON.stringify(orders));
}

// ===== VALIDATE TH√îNG TIN THANH TO√ÅN =====
function validateCheckoutForm(formData) {
    const errors = [];
    
    // Ki·ªÉm tra h·ªç t√™n
    if (!formData.fullName || formData.fullName.trim().length < 3) {
        errors.push('H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±');
    }
    
    // Ki·ªÉm tra email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!formData.email || !emailRegex.test(formData.email)) {
        errors.push('Email kh√¥ng h·ª£p l·ªá');
    }
    
    // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i
    const phoneRegex = /^[0-9]{10,11}$/;
    if (!formData.phone || !phoneRegex.test(formData.phone.replace(/[- ]/g, ''))) {
        errors.push('S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10-11 ch·ªØ s·ªë');
    }
    
    // Ki·ªÉm tra ƒë·ªãa ch·ªâ
    if (!formData.address || formData.address.trim().length < 5) {
        errors.push('ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá');
    }
    
    // Ki·ªÉm tra th√†nh ph·ªë
    if (!formData.city || formData.city.trim().length < 2) {
        errors.push('Vui l√≤ng nh·∫≠p th√†nh ph·ªë/t·ªânh');
    }
    
    return errors;
}

// ===== FORMAT TR·∫†NG TH√ÅI ƒê∆†N H√ÄNG =====
function getOrderStatusLabel(status) {
    const statusLabels = {
        'pending': '‚è≥ Ch·ªù x·ª≠ l√Ω',
        'processing': 'üì¶ ƒêang x·ª≠ l√Ω',
        'shipping': 'üöö ƒêang giao h√†ng',
        'completed': '‚úÖ Ho√†n th√†nh',
        'cancelled': '‚ùå ƒê√£ h·ªßy'
    };
    return statusLabels[status] || status;
}

// ===== FORMAT PH∆Ø∆†NG TH·ª®C THANH TO√ÅN =====
function getPaymentMethodLabel(method) {
    const methodLabels = {
        'cod': 'üíµ Thanh to√°n khi nh·∫≠n h√†ng (COD)',
        'bank': 'üè¶ Chuy·ªÉn kho·∫£n ng√¢n h√†ng',
        'card': 'üí≥ Th·∫ª t√≠n d·ª•ng/Ghi n·ª£',
        'momo': 'üì± V√≠ MoMo',
        'zalopay': 'üíô ZaloPay'
    };
    return methodLabels[method] || method;
}
 // Thanh to√°n
    const cart = cartUtils.getCart();  // ‚Üê L·∫•y gi·ªè h√†ng
    // X·ª≠ l√Ω thanh to√°n...

// ===== T√çNH T·ªîNG DOANH THU =====
function calculateTotalRevenue() {
    const orders = getAllOrders();
    return orders
        .filter(order => order.status === 'completed')
        .reduce((total, order) => total + order.total, 0);
}

// ===== EXPORT FUNCTIONS =====
window.checkoutUtils = {
    saveOrder,
    getAllOrders,
    getUserOrders,
    getOrderById,
    updateOrderStatus,
    deleteOrder,
    validateCheckoutForm,
    getOrderStatusLabel,
    getPaymentMethodLabel,
    calculateTotalRevenue
};
document.addEventListener('DOMContentLoaded', function() {
    renderAllProducts();
    updateCartBadge();  // ‚úÖ Hi·ªÉn th·ªã s·ªë gi·ªè h√†ng khi load
});
